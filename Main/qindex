#!/usr/bin/env python

import argparse
import sys
import os

thisdir=os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.dirname(thisdir))

def CommonEditAddParser(forAdd):

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("--path",required=forAdd,help="the path to scan")
    parser.add_argument("--type",required=False,default='file' if forAdd else None,choices=['file','smb','ftp'],help="the type of path")
    parser.add_argument("--user",required=False,help="the user needed to log on")
    parser.add_argument("--password",required=False,help="the password needed to log on")
    parser.add_argument("--exclude-name-glob",required=False,action='append',help="exclusion name pattern as glob")
    parser.add_argument("--exclude-name-regex",required=False,action='append',help="exclusion name pattern as regex")
    parser.add_argument("--exclude-path-glob",required=False,action='append',help="exclusion path pattern as glob")
    parser.add_argument("--exclude-path-regex",required=False,action='append',help="exclusion path pattern as regex")

    if not forAdd:
        parser.add_argument("--delete-exclude-name-glob",required=False,help="reset the exclude name glob", action='store_true')
        parser.add_argument("--delete-exclude-name-regex",required=False,help="reset the exclude name regex", action='store_true')
        parser.add_argument("--delete-exclude-path-glob",required=False,help="reset the exclude path glob", action='store_true')
        parser.add_argument("--delete-exclude-path-regex",required=False,help="reset the exclude path regex", action='store_true')

    return parser


def DoMain():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    
    # (re)create the database 
    commonFileParser = argparse.ArgumentParser(add_help=False)
    commonFileParser.add_argument("-f","--file",required=False,help="the database file name")

    createparser = subparsers.add_parser('create',parents=[commonFileParser])

    createparser.set_defaults(func=DoDatabaseCreate)
    
    # update the database
    updateparser = subparsers.add_parser('update',parents=[commonFileParser])
    updateparser.add_argument("-q","--quiet",action='store_true',required=False,help="be quiet; do not display messages")
    updateparser.set_defaults(func=DoDatabaseUpdate)
    
    configparser = subparsers.add_parser("config",parents=[commonFileParser])

    subconfig = configparser.add_subparsers()
    addparser = subconfig.add_parser("add",parents=[CommonEditAddParser(True)])
    addparser.set_defaults(func=DoConfigAdd)

    commonSelectParser = argparse.ArgumentParser(add_help=False)
    commonSelectParser.add_argument("-a","--all",required=False,action='store_true',help="all paths to scan")
    commonSelectParser.add_argument("-i","--index",required=False,type=int,help="path with specified index")

    viewparser = subconfig.add_parser("view",parents=[commonSelectParser])
    viewparser.set_defaults(func=DoConfigView)

    editparser = subconfig.add_parser("edit",parents=[CommonEditAddParser(False)])
    editparser.add_argument("-i","--index",required=True,type=int,help="the index of the path to be edited")
    editparser.set_defaults(func=DoConfigEdit)

    deleteparser = subconfig.add_parser("delete",parents=[commonSelectParser])
    deleteparser.set_defaults(func=DoConfigDelete)

    searchparser = subparsers.add_parser("search",parents=[commonFileParser])
    searchparser.add_argument("--type",required=False,default='glob',choices=['glob','iglob','like','regex','iregex'], help="the type of pattern (glob by default)")
    searchparser.add_argument("pattern",nargs='+',help="the patterns to match")
    searchparser.add_argument("--limit",required=False,type=int,help="the maximum number of results to return")
    searchparser.add_argument("--offset",required=False,type=int,default=0,help="the offset where the limit starts applying")
    searchparser.add_argument("--operation",required=False,default='OR',choices=['OR','AND'],help="choose operation between pattern matches (default is OR)")
    searchparser.set_defaults(func=DoSearch)

    result = parser.parse_args()

    result.func(result)

def DoDatabaseCreate(args):
    import Database
    Database.CreateDatabase(args.file)

def DoDatabaseUpdate(args):
    import Indexer
    Indexer.UpdateDatabase(args.file,args.quiet)

def DoConfigAdd(args):
    import Config
    Config.AddScanPath(args.file,
                    args.path,args.type,
                    args.user,args.password,
                    args.exclude_name_glob,args.exclude_name_regex,
                    args.exclude_path_glob,args.exclude_path_regex
                )
    
def DoConfigView(args):
    pathId = None
    if args.all == False and args.index != None:
        pathId = args.index

    import Config
    Config.ShowScanPaths(args.file,pathId)

def DoConfigEdit(args):
    import Config
    Config.EditScanPath(args.file,args.index,
                        args.path,args.type,args.user,args.password,
                        args.delete_exclude_name_glob,args.exclude_name_glob,
                        args.delete_exclude_name_regex,args.exclude_name_regex,
                        args.delete_exclude_path_glob,args.exclude_path_glob,
                        args.delete_exclude_path_regex,args.exclude_path_regex)

def DoConfigDelete(args):
    if args.all == False and args.index is None:
        print "Nothing to delete specified"
        return

    pathId = None
    if args.all == False and not args.index is None:
        pathId = args.index

    import Config
    Config.DeleteScanPaths(args.file,pathId)

def DoSearch(args):
    import Query
    files = Query.Search(args.file, args.type, args.pattern, args.limit, args.offset, args.operation )

    for file in files:
        print file

if __name__=="__main__":
    DoMain()

